"use client";
import React, { useEffect } from "react";
import { useInView } from "react-intersection-observer";
import { useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/lib/supabaseClient";
import { useLocations } from "@/hooks/useLocations";
import { motion, AnimatePresence } from "framer-motion";
import SkeletonCard from "@/components/SkeletonCard";
import LocationCard from "@/components/LocationCard";
import dynamic from "next/dynamic";
import searchAnimation from "@/public/searchAnimation.json";
import { useUIStore } from "@/store/uiStore";
const Lottie = dynamic(() => import("lottie-react"), { ssr: false });
/**
 * LocationList ‚Äî –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ª–æ–∫–∞—Ü–∏–π.
 *
 * ‚Ä¢ –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ (useInfiniteQuery¬†+¬†Intersection¬†Observer).
 * ‚Ä¢ Realtime‚Äë–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ INSERT‚ÄØ/‚ÄØUPDATE‚ÄØ/‚ÄØDELETE –≤¬†—Ç–∞–±–ª–∏—Ü–µ `locations`.
 *   ‚ó¶ INSERT¬†‚Äî –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à, —á—Ç–æ–±—ã –ø–æ–¥—Ç—è–Ω—É—Ç—å –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é.
 *   ‚ó¶ UPDATE¬†‚Äî –ø–∞—Ç—á–∏–º —ç–ª–µ–º–µ–Ω—Ç –≤¬†–∫—ç—à–µ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ç—á–∞.
 *   ‚ó¶ DELETE¬†‚Äî —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑¬†–∫—ç—à–∞.
 */
export default function LocationList() {
  const {
    data,
    isLoading,
    isError,
    fetchNextPage,
    hasNextPage,
    isFetchingNextPage,
  } = useLocations();

  const { ref, inView } = useInView();
  const queryClient = useQueryClient();
  const searchQuery = useUIStore(s => s.searchQuery);
  /* ---------- Infinite¬†Scroll ---------- */
  useEffect(() => {
    if (inView && hasNextPage) {
      fetchNextPage();
    }
  }, [inView, hasNextPage, fetchNextPage]);

  /* ---------- Realtime¬†subscription ---------- */
  useEffect(() => {
    const channel = supabase
      .channel("realtime:locations-changes")
      // INSERT ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –¥–æ—à–ª–∏ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
      .on(
        "postgres_changes",
        { event: "INSERT", schema: "public", table: "locations" },
        () => {
          queryClient.invalidateQueries({ queryKey: ["locations"] });
        }
      )
      // UPDATE ‚Äî —Ç–æ—á–µ—á–Ω–æ –ø–∞—Ç—á–∏–º –∫—ç—à, –∏–∑–±–µ–≥–∞—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      .on(
        "postgres_changes",
        { event: "UPDATE", schema: "public", table: "locations" },
        ({ new: newRow }) => {
          queryClient.setQueriesData({ queryKey: ["locations"] }, (old) => {
            if (!old) return old;
            return {
              ...old,
              pages: old.pages.map((page) => ({
                ...page,
                items: page.items.map((item) =>
                  item.id === newRow.id ? { ...item, ...newRow } : item
                ),
              })),
            };
          });
        }
      )
      // DELETE ‚Äî —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑¬†–∫—ç—à–∞
      .on(
        "postgres_changes",
        { event: "DELETE", schema: "public", table: "locations" },
        ({ old: oldRow }) => {
          queryClient.setQueriesData({ queryKey: ["locations"] }, (old) => {
            if (!old) return old;
            return {
              ...old,
              pages: old.pages.map((page) => ({
                ...page,
                items: page.items.filter((item) => item.id !== oldRow.id),
              })),
            };
          });
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [queryClient]);

  /* ---------- Render ---------- */
  if (isLoading) {
    if (searchQuery) {
      // –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ ‚Äî –≤–∞—à JSON-–∞–Ω–∏–º–∞—Ç–æ—Ä
      return (
        <AnimatePresence mode="wait">
         <motion.div
           key="search-animation"
           initial={{ scale: 0.4, opacity: 0.1 }}
           animate={{ scale: 1, opacity: 1 }}
           exit={{ opacity: 0 }}
           transition={{ duration: 1, ease: "easeOut" }}
           className="flex justify-center items-center py-20"
         >
           <Lottie animationData={searchAnimation} loop />
         </motion.div>
         </AnimatePresence>
      );
    }
    // –∏–Ω–∞—á–µ ‚Äî –ø—Ä–∏–≤—ã—á–Ω—ã–µ —Å–∫–µ–ª–µ—Ç–æ–Ω—ã
    return (
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {[...Array(6)].map((_, idx) => (
          <SkeletonCard key={idx} />
        ))}
      </div>
    );
  }

  if (isError) {
    return <div className="text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π</div>;
  }

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {data.pages.map((page) =>
          page.items.map((location) => (
            <LocationCard key={location.id} location={location} />
          ))
        )}
      </div>
      <div ref={ref} className="py-8 text-center">
        {isFetchingNextPage
          ? "–ó–∞–≥—Ä—É–∑–∫–∞..."
          : hasNextPage
          ? "–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –≤–Ω–∏–∑ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö"
          : "–ù–µ—Ç –ª–æ–∫–∞—Ü–∏–π. –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é üòâ"}
      </div>
    </>
  );
}
