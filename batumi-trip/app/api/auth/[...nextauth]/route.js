// —Ñ–∞–π–ª: app/api/auth/[...nextauth]/route.js
import NextAuth from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import { supabase } from '@/lib/supabaseClient';

export const authOptions = {
  // 1) –ü—Ä–æ–≤–∞–π–¥–µ—Ä Credentials –±–µ–∑ –ø–∞—Ä–æ–ª—è
  providers: [
    CredentialsProvider({
      name: '',
      credentials: {
        username: { label: '–ö–∞–∫ –º–Ω–µ —Å—Ç–æ–∏—Ç —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?üßê', type: 'text', placeholder: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è' },
      },
      async authorize(credentials) {
        const username = credentials?.username?.trim();
        if (!username) return null;

        // 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
        const { error } = await supabase
          .from('users')
          .upsert({ id: username }, { returning: 'minimal' });
        if (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ upsert –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }

        // 2. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è NextAuth
        return { id: username };
      },
    }),
  ],

  // 2) –°–µ—Å—Å–∏–∏ –∏ JWT
  session: {
    strategy: 'jwt',
    maxAge: 30 * 24 * 60 * 60, // 30 –¥–Ω–µ–π
  },
  jwt: {
    secret: process.env.NEXTAUTH_SECRET,
  },

  // 3) –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ session.user
  callbacks: {
    async jwt({ token, user }) {
      // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –ª–æ–≥–∏–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ token
      if (user?.id) token.id = user.id;
      return token;
    },
    async session({ session, token }) {
      // –°—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ Supabase –≤—Å—é –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      if (token.id) {
        const { data: userRecord, error } = await supabase
          .from('users')
          .select('id, created_at, updated_at')
          .eq('id', token.id)
          .single();
        if (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
          session.user = { id: token.id };
        } else {
          session.user = userRecord;
        }
      }
      return session;
    },
  },

  // 4) –Ø–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è HTTP-only cookie
  cookies: {
    sessionToken: {
      name:
        process.env.NODE_ENV === 'production'
          ? '__Secure-next-auth.session-token'
          : 'next-auth.session-token',
      options: {
        httpOnly: true,
        sameSite: 'lax',
        path: '/',
        secure: process.env.NODE_ENV === 'production',
      },
    },
  },

  // 5) Secret –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ JWT –∏ CSRF —Ç–æ–∫–µ–Ω–æ–≤
  secret: process.env.NEXTAUTH_SECRET,
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };
